{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy EC2 instance with openpose library",
    "Parameters": {
        "KeyPairName": {
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "InstanceType": {
            "AllowedValues": [
                "p2.xlarge",
                "p2.8xlarge",
                "p2.16xlarge"
            ],
            "ConstraintDescription": "Choose an instance type.",
            "Default": "p2.xlarge",
            "Description": "Openpose node instance type",
            "Type": "String"
        },
        "PublicSubnetId": {
            "ConstraintDescription": "Must be the Id of an existing Subnet.",
            "Description": "Name of an existing public subnet in which Openpose instance to be launched.",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "AccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "Must be a valid IP range in x.x.x.x/x notation",
            "Description": "The CIDR IP range that is permitted to access. Note: a value of 0.0.0.0/0 will allow access from ANY ip address",
            "Type": "String"
        },
        "VPC": {
            "AllowedPattern": "vpc-[0-9a-z]{8}",
            "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy EC2 instance.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "ArtifactBucket": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "Description": "S3 bucket containing the templates and other artifacts to deploy the stack. It can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "lib-ddr",
            "Type": "String"
        },
        "ArtifactKeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "Description": "S3 object key prefix. It can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "us-west-2": {
                "CustomAmi": "ami-c7f118bf"
            }
        }
    },
    "Resources": {
        "OpenposeInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {},
                        "files": {
                            "/home/ubuntu/ddr/ddr_config.props": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "ddr_score_table: ddr_score\n",
                                            "ddr_images_table: ddr_images\n",
                                            "s3_bucket: ",
                                            {
                                                "Fn::Join": [
                                                    "-",
                                                    [
                                                        "ddr",
                                                        "images",
                                                        "bucket",
                                                        {
                                                            "Ref": "AWS::AccountId"
                                                        },
                                                        {
                                                            "Ref": "AWS::Region"
                                                        }
                                                    ]
                                                ]
                                            },
                                            "\n",
                                            "sqs_url: ",
                                            {
                                                "Ref": "ImageQueue"
                                            }
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "CustomAmi"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SubnetId": {
                    "Ref": "PublicSubnetId"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "# Install cfn bootstraping tools\n",
                                "apt-get update\n",
                                "apt-get -y install python-setuptools\n",
                                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "# Helper function\n",
                                "function error_exit\n",
                                "{\n",
                                "  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '",
                                {
                                    "Ref": "OpenposeInstanceWaitHandle"
                                },
                                "'\n",
                                "  exit 1\n",
                                "}\n",
                                "# Install software\n",
                                "/usr/local/bin/cfn-init -v --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource OpenposeInstance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init'\n",
                                "# All is well so signal success\n",
                                "/usr/local/bin/cfn-signal -e 0 -r \"Build Process Complete\" '",
                                {
                                    "Ref": "OpenposeInstanceWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Openpose Instance"
                    }
                ]
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security Group",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "AccessCIDR"
                        }
                    }
                ]
            }
        },
        "OpenposeInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "OpenposeInstanceWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "OpenposeInstance",
            "Properties": {
                "Handle": {
                    "Ref": "OpenposeInstanceWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "WebAppS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ddr",
                            "webapp",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "AWS::Region"
                            }
                        ]
                    ]
                },
                "AccessControl": "PublicRead",
                "WebsiteConfiguration": {
                    "IndexDocument": "scoreboard.html"
                }
            }
        },
        "WebappBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "MyPolicy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "PublicReadForGetBucketObjects",
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "s3:GetObject",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "WebAppS3Bucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "WebAppS3Bucket"
                }
            }
        },
        "ImageQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ddr",
                            "images",
                            "queue",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "AWS::Region"
                            }
                        ]
                    ]
                }
            }
        },
        "ImageS3Bucket": {
            "DependsOn": [
                "ImageQueue",
                "ImageQueuePolicy"
            ],
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ddr",
                            "images",
                            "bucket",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "AWS::Region"
                            }
                        ]
                    ]
                },
                "NotificationConfiguration": {
                    "QueueConfigurations": [
                        {
                            "Event": "s3:ObjectCreated:Put",
                            "Filter": {
                                "S3Key": {
                                    "Rules": [
                                        {
                                            "Name": "prefix",
                                            "Value": "images/"
                                        }
                                    ]
                                }
                            },
                            "Queue": {
                                "Fn::GetAtt": [
                                    "ImageQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "ImageQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "image-queue-policy-id",
                    "Statement": [
                        {
                            "Sid": "send-message",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": "SQS:SendMessage",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "ImageQueue",
                                    "Arn"
                                ]
                            },
                            "Condition": {
                                "ArnLike": {
                                    "aws:SourceArn": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:*:*:",
                                                {
                                                    "Fn::Join": [
                                                        "-",
                                                        [
                                                            "ddr",
                                                            "images",
                                                            "bucket",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            {
                                                                "Ref": "AWS::Region"
                                                            }
                                                        ]
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                }
                            }
                        },
                        {
                            "Sid": "EC2-polling",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "*"
                            },
                            "Action": "SQS:*",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "ImageQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "Queues": [
                    {
                        "Ref": "ImageQueue"
                    }
                ]
            }
        },
        "EmptyBuckets": {
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EmptyBucketsFunction",
                        "Arn"
                    ]
                },
                "ImagesBucket": {
                    "Ref": "ImageS3Bucket"
                },
                "WebAppS3Bucket": {
                    "Ref": "WebAppS3Bucket"
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "EmptyBucketsFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import cfnresponse",
                                "import boto3",
                                "from botocore.exceptions import ClientError",
                                "",
                                "s3 = boto3.resource('s3')",
                                "",
                                "def handler(event, context):",
                                "    images_bucket = s3.Bucket(event['ResourceProperties']['ImagesBucket'])",
                                "    webapp_bucket = s3.Bucket(event['ResourceProperties']['WebAppS3Bucket'])",
                                "    if event['RequestType'] == 'Delete':",
                                "        try:",
                                "            images_bucket.objects.all().delete()",
                                "            webapp_bucket.objects.all().delete()",
                                "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                "        except ClientError as e:",
                                "            print(e)",
                                "            return cfnresponse.send(event, context, cfnresponse.FAILED, {})",
                                "    else:",
                                "        return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "EmptyBucketsRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 30
            },
            "Type": "AWS::Lambda::Function"
        },
        "EmptyBucketsRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "LambdaLogging"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:ListBucket",
                                        "s3:DeleteObject"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ImageS3Bucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "ListDeleteImagesBucket"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ApiGatewayStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://${ArtifactBucket}.s3.amazonaws.com/${ArtifactKeyPrefix}templates/api-gateway.template"
                },
                "Parameters": {
                    "ArtifactBucket": {
                        "Ref": "ArtifactBucket"
                    },
                    "ArtifactKeyPrefix": {
                        "Ref": "ArtifactKeyPrefix"
                    }
                }
            }
        }
    },
    "Outputs": {
        "ImageS3Bucket": {
            "Description": "S3 bucket where images are uploaded from camera",
            "Value": {
                "Ref": "ImageS3Bucket"
            }
        },
        "ImageQueueUrl": {
            "Description": "SQS Queue URL of Images bucket notification target",
            "Value": {
                "Ref": "ImageQueue"
            }
        },
        "ImageQueueArn": {
            "Description": "SQS Queue ARN of Images bucket notification target",
            "Value": {
                "Fn::GetAtt": [
                    "ImageQueue",
                    "Arn"
                ]
            }
        },
        "ScoreboardS3Bucket": {
            "Description": "S3 bucket hosting scoreboard web app",
            "Value": {
                "Ref": "WebAppS3Bucket"
            }
        },
        "WebsiteURL": {
            "Value": {
                "Fn::GetAtt": [
                    "WebAppS3Bucket",
                    "WebsiteURL"
                ]
            },
            "Description": "URL for scoreboard website hosted on S3"
        },
        "S3BucketSecureURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "WebAppS3Bucket",
                                "DomainName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "Secured URL of S3 bucket to hold scoreboard website content"
        }
    }
}
